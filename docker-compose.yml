version: "3.9"

networks:
  devops-stack_ci_net:
    external: true   # crée-le une fois: docker network create devops-stack_ci_net

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: unless-stopped
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # HTTP and HTTPS entrypoints
      - --entrypoints.web.address=:80
      #- --entrypoints.websecure.address=:443
      # Let's Encrypt ACME configuration
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      # - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      # - --certificatesresolvers.letsencrypt.acme.email=admin@wk-archi-o23b-4-5-g5.online
      # - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # Très important: indiquer à Traefik sur quel network Docker il découvre/routte
      - --providers.docker.network=devops-stack_ci_net
      # Dashboard (expose sur 8080, à protéger si prod)
      - --api.insecure=true
      # Redirect HTTP to HTTPS
      # - --entrypoints.web.http.redirections.entrypoint.to=websecure
      # - --entrypoints.web.http.redirections.entrypoint.scheme=https
    ports:
      - "80:80"
      # - "443:443"
      - "8090:8080"   # Dashboard Traefik sur port 8090
    volumes:
      # - ./traefik/acme.json:/letsencrypt/acme.json
      # - ./traefik/dynamic:/etc/traefik/dynamic
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      devops-stack_ci_net:
        aliases:
          - ${GITLAB_HOST}
          - ${JENKINS_HOST}
          - ${REGISTRY_HOST}

  gitlab:
    platform: linux/amd64
    shm_size: "1g"
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    hostname: ${GITLAB_HOST}
    restart: unless-stopped
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://${GITLAB_HOST}'
        gitlab_rails['gitlab_ssh_host'] = '${GITLAB_HOST}'
        # Configuration minimale pour forcer HTTP
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['redirect_http_to_https'] = false
        nginx['hsts_max_age'] = 0
        # === Registry en HTTP interne ===
        gitlab_rails['registry_enabled'] = true
        registry_external_url 'http://${REGISTRY_HOST}'
        registry['enable'] = true
        registry_nginx['listen_port'] = 5050
        registry_nginx['listen_https'] = false
    ports:
      - "2222:22"   # SSH GitLab
      - "8081:80"   # optionnel pour debug direct (sinon supprimer ce publish)
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=devops-stack_ci_net"

      # Désactiver le service auto par défaut
      - "traefik.http.services.gitlab.loadbalancer.server.port=0"

      # GitLab Web (HTTPS with Let's Encrypt)
      - "traefik.http.routers.gitlab.rule=Host(`${GITLAB_HOST}`)"
      - "traefik.http.routers.gitlab.entrypoints=web"
      - "traefik.http.routers.gitlab.service=gitlab-web"
      # - "traefik.http.routers.gitlab.tls=true"
      # - "traefik.http.routers.gitlab.tls.certresolver=letsencrypt"
      - "traefik.http.services.gitlab-web.loadbalancer.server.port=80"

      # GitLab Registry (HTTPS with Let's Encrypt)
      - "traefik.http.routers.gitlab-reg.rule=Host(`${REGISTRY_HOST}`)"
      - "traefik.http.routers.gitlab-reg.entrypoints=web"
      - "traefik.http.routers.gitlab-reg.service=gitlab-registry"
      # - "traefik.http.routers.gitlab-reg.tls=true"
      # - "traefik.http.routers.gitlab-reg.tls.certresolver=letsencrypt"
      - "traefik.http.services.gitlab-registry.loadbalancer.server.port=5050"
    networks: [devops-stack_ci_net]

  jenkins:
    platform: linux/amd64
    build: ./jenkins
    container_name: jenkins
    restart: unless-stopped
    user: "0:0"
    environment:
      - JAVA_OPTS=-Dhudson.security.csrf.CrumbFilter.EXCLUDES=/gitlab-webhook/.*
      - JENKINS_OPTS=--prefix=/
      - NO_PROXY=registry.gitlab.local,gitlab.local,jenkins.local,localhost,127.0.0.1
      - no_proxy=registry.gitlab.local,gitlab.local,jenkins.local,localhost,127.0.0.1
    ports:
      - "8080:8080"   # Exposition directe de Jenkins
    volumes:
      - ./data/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=devops-stack_ci_net"
      - "traefik.http.routers.jenkins.rule=Host(`${JENKINS_HOST}`)"
      - "traefik.http.routers.jenkins.entrypoints=web"
      # - "traefik.http.routers.jenkins.tls=true"
      # - "traefik.http.routers.jenkins.tls.certresolver=letsencrypt"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
    networks: [devops-stack_ci_net]

  # MinIO (S3 compatible storage)
  minio:
    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
    container_name: minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks: [devops-stack_ci_net]
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=devops-stack_ci_net"
      
      # API S3
      - "traefik.http.routers.minio.rule=Host(`${MINIO_API_HOST}`)"
      - "traefik.http.routers.minio.entrypoints=web"
      - "traefik.http.routers.minio.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      
      # Console MinIO
      - "traefik.http.routers.minio-console.rule=Host(`${MINIO_CONSOLE_HOST}`)"
      - "traefik.http.routers.minio-console.entrypoints=web"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
    depends_on:
      - traefik

  # Runner Restic (utilisé par Jenkins via docker exec)
  restic-runner:
    image: restic/restic:latest
    container_name: restic-runner
    entrypoint: ["sleep", "infinity"]
    restart: unless-stopped
    networks: [devops-stack_ci_net]
    environment:
      # Repository S3 MinIO
      RESTIC_REPOSITORY: s3:http://${MINIO_API_HOST}/${MINIO_BACKUP_BUCKET}
      # Ces variables seront overridées par Jenkins via withCredentials
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - restic_cache:/root/.cache/restic
      # Montages en lecture seule pour les données à sauvegarder
      - ./data/gitlab:/backup/gitlab:ro
      - ./data/jenkins:/backup/jenkins:ro
      - gitlab_data:/backup/gitlab_data:ro
      - gitlab_config:/backup/gitlab_config:ro
      - gitlab_logs:/backup/gitlab_logs:ro
      # Scripts de backup
      - ./infra/backups:/backup-scripts:ro
    healthcheck:
      test: ["CMD", "restic", "version"]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      - minio

  # Pushgateway pour les métriques Prometheus
  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    restart: unless-stopped
    networks: [devops-stack_ci_net]
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=devops-stack_ci_net"
      - "traefik.http.routers.pushgw.rule=Host(`${PUSHGATEWAY_HOST}`)"
      - "traefik.http.routers.pushgw.entrypoints=web"
      - "traefik.http.services.pushgw.loadbalancer.server.port=9091"
    depends_on:
      - traefik

volumes:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  minio_data:
  restic_cache:
